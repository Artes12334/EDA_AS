from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.web_app_info import WebAppInfo
import json
import config

bot = Bot(config.BOT_TOKEN)
dp = Dispatcher(bot)

markup = types.ReplyKeyboardMarkup()
btn0 = types.KeyboardButton("ü•õ–ú–æ–ª–æ–∫–æ")
btn1 = types.KeyboardButton("ü•ö–Ø–π—Ü–∞")
markup.row(btn0, btn1)
btn2 = types.KeyboardButton("ü•ï–û–≤–æ—â–∏")
btn3 = types.KeyboardButton("ü•ù–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã")
markup.row(btn2, btn3)
btn4 = types.KeyboardButton("üç≠–°–ª–∞–¥–æ—Å—Ç–∏")
btn5 = types.KeyboardButton("ü•ì–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞")
markup.row(btn4, btn5)
btn6 = types.KeyboardButton("üêü–†—ã–±–∞")
btn7 = types.KeyboardButton("ü•ü–ó–∞–º–æ—Ä–æ–∑–∫–∞")
markup.row(btn6, btn7)
btn8 = types.KeyboardButton("‚òï–ù–∞–ø–∏—Ç–∫–∏")
btn9 = types.KeyboardButton("üå≠–ö–æ–ª–±–∞—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è")
markup.row(btn8, btn9)
btn10 = types.KeyboardButton("ü•Ø–í—ã–ø–µ—á–∫–∞")
btn11 = types.KeyboardButton("üßÄ–°—ã—Ä—ã")
markup.row(btn10, btn11)
btn12 = types.KeyboardButton("üçù–ú–∞–∫–∞—Ä–æ–Ω—ã –∏ –∫—Ä—É–ø—ã")
btn13 = types.KeyboardButton("üçû–í—Å—ë –¥–ª—è –≤—ã–ø–µ—á–∫–∏")
markup.row(btn12, btn13)
btn14 = types.KeyboardButton("üçû–ú–∞—Å–ª–æ, —Å–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏")
btn15 = types.KeyboardButton("ü•´–ö–æ–Ω—Å–µ—Ä–≤—ã –∏ —Å–æ–ª–µ–Ω–∏—è")
markup.row(btn14, btn15)
btn16 = types.KeyboardButton("üå∞–û—Ä–µ—Ö–∏, —Å–Ω–µ–∫–∏ –∏ —á–∏–ø—Å—ã")
btn17 = types.KeyboardButton("üß∏–î–ª—è –¥–µ—Ç–µ–π")
markup.row(btn16, btn17)
btn18 = types.KeyboardButton("üíÑ–ö–æ—Å–º–µ—Ç–∏–∫–∞")
btn19 = types.KeyboardButton("üß™–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è")
markup.row(btn18, btn19)
markup.add(types.KeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞"))
markup.add(types.KeyboardButton("üìù–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", web_app=WebAppInfo(url="https://artes12334.github.io/EDA_AS/")))
markup.add(types.KeyboardButton("üÜò–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å–ª—É–∂–±–∞"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ï–î–ê –ê–°")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å", reply_markup=markup)

@dp.message_handler(commands=['help'])
async def start(message: types.Message):
    await message.answer("–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å - telegram: https://t.me/Russianboss228")
    await message.answer("–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å - telegram: https://t.me/ArtSlast512")

@dp.message_handler(content_types=["text"])
async def help(message: types.Message):
    print(message.text)
    if message.text.lower().strip() == "üÜò–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å–ª—É–∂–±–∞":
        await message.answer("–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å - telegram: https://t.me/Russianboss228")
        await message.answer("–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å - telegram: https://t.me/ArtSlast512")

    if message.text.lower().strip() == "ü•õ–º–æ–ª–æ–∫–æ":
        markupMilk = types.ReplyKeyboardMarkup()
        markupMilk.add(types.KeyboardButton("–ú–æ–ª–æ–∫–æ"))
        markupMilk.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupMilk)

    if message.text.lower().strip() == "ü•ö—è–π—Ü–∞":
        markupEggs = types.ReplyKeyboardMarkup()
        markupEggs.add(types.KeyboardButton("–Ø–π—Ü–∞"))
        markupEggs.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupEggs)

    if message.text.lower().strip() == "ü•ï–æ–≤–æ—â–∏":
        markupVeg = types.ReplyKeyboardMarkup()
        markupVeg.add(types.KeyboardButton("–û–≤–æ—â–∏"))
        markupVeg.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupVeg)

    if message.text.lower().strip() == "ü•ù—Ñ—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã":
        markupBerAndFrut = types.ReplyKeyboardMarkup()
        markupBerAndFrut.add(types.KeyboardButton("–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã"))
        markupBerAndFrut.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupBerAndFrut)

    if message.text.lower().strip() == "üç≠—Å–ª–∞–¥–æ—Å—Ç–∏":
        markupCandy = types.ReplyKeyboardMarkup()
        markupCandy.add(types.KeyboardButton("–°–ª–∞–¥–æ—Å—Ç–∏"))
        markupCandy.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupCandy)

    if message.text.lower().strip() == "ü•ì–º—è—Å–æ –∏ –ø—Ç–∏—Ü–∞":
        markupMeal = types.ReplyKeyboardMarkup()
        markupMeal.add(types.KeyboardButton("–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞"))
        markupMeal.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupMeal)

    if message.text.lower().strip() == "üêü—Ä—ã–±–∞":
        markupFish = types.ReplyKeyboardMarkup()
        markupFish.add(types.KeyboardButton("–†—ã–±–∞"))
        markupFish.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupFish)

    if message.text.lower().strip() == "ü•ü–∑–∞–º–æ—Ä–æ–∑–∫–∞":
        markupFrige = types.ReplyKeyboardMarkup()
        markupFrige.add(types.KeyboardButton("–ú–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"))
        markupFrige.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupFrige)

    if message.text.lower().strip() == "‚òï–Ω–∞–ø–∏—Ç–∫–∏":
        markupDrink = types.ReplyKeyboardMarkup()
        markupDrink.add(types.KeyboardButton("–ù–∞–ø–∏—Ç–∫–∏"))
        markupDrink.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupDrink)

    if message.text.lower().strip() == "üå≠–∫–æ–ª–±–∞—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è":
        markupColbas = types.ReplyKeyboardMarkup()
        markupColbas.add(types.KeyboardButton("–ö–æ–ª–±–∞—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"))
        markupColbas.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupColbas)

    if message.text.lower().strip() == "ü•Ø–≤—ã–ø–µ—á–∫–∞":
        markupBread = types.ReplyKeyboardMarkup()
        markupBread.add(types.KeyboardButton("–í—ã–ø–µ—á–∫–∞"))
        markupBread.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupBread)

    if message.text.lower().strip() == "üßÄ—Å—ã—Ä—ã":
        markupChess = types.ReplyKeyboardMarkup()
        markupChess.add(types.KeyboardButton("–°—ã—Ä—ã"))
        markupChess.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupChess)

    if message.text.lower().strip() == "üçù–º–∞–∫–∞—Ä–æ–Ω—ã –∏ –∫—Ä—É–ø—ã":
        markupMakaron = types.ReplyKeyboardMarkup()
        markupMakaron.add(types.KeyboardButton("–ú–∞–∫–∞—Ä–æ–Ω—ã –∏ –∫—Ä—É–ø—ã"))
        markupMakaron.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupMakaron)

    if message.text.lower().strip() == "üçû–≤—Å—ë –¥–ª—è –≤—ã–ø–µ—á–∫–∏":
        markupForBread = types.ReplyKeyboardMarkup()
        markupForBread.add(types.KeyboardButton("–í—Å—ë –¥–ª—è –≤—ã–ø–µ—á–∫–∏"))
        markupForBread.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupForBread)

    if message.text.lower().strip() == "üçû–º–∞—Å–ª–æ, —Å–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏":
        markupMaslo = types.ReplyKeyboardMarkup()
        markupMaslo.add(types.KeyboardButton("–ú–∞—Å–ª–æ, —Å–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏"))
        markupMaslo.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupMaslo)

    if message.text.lower().strip() == "ü•´–∫–æ–Ω—Å–µ—Ä–≤—ã –∏ —Å–æ–ª–µ–Ω–∏—è":
        markupConserv = types.ReplyKeyboardMarkup()
        markupConserv.add(types.KeyboardButton("–ö–æ–Ω—Å–µ—Ä–≤—ã –∏ —Å–æ–ª–µ–Ω–∏—è"))
        markupConserv.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupConserv)

    if message.text.lower().strip() == "üå∞–æ—Ä–µ—Ö–∏, —Å–Ω–µ–∫–∏ –∏ —á–∏–ø—Å—ã":
        markupChipsAndSnak = types.ReplyKeyboardMarkup()
        markupChipsAndSnak.add(types.KeyboardButton("–û—Ä–µ—Ö–∏, —Å–Ω–µ–∫–∏ –∏ —á–∏–ø—Å—ã"))
        markupChipsAndSnak.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupChipsAndSnak)

    if message.text.lower().strip() == "üß∏–¥–ª—è –¥–µ—Ç–µ–π":
        markupForChild = types.ReplyKeyboardMarkup()
        markupForChild.add(types.KeyboardButton("–î–ª—è –¥–µ—Ç–µ–π"))
        markupForChild.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupForChild)

    if message.text.lower().strip() == "üíÑ–∫–æ—Å–º–µ—Ç–∏–∫–∞":
        markupCosmetic = types.ReplyKeyboardMarkup()
        markupCosmetic.add(types.KeyboardButton("–ö–æ—Å–º–µ—Ç–∏–∫–∞"))
        markupCosmetic.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupCosmetic)

    if message.text.lower().strip() == "üß™–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è":
        markupChemistry = types.ReplyKeyboardMarkup()
        markupChemistry.add(types.KeyboardButton("–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è"))
        markupChemistry.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markupChemistry)

    if message.text.lower().strip() == "–Ω–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å", reply_markup=markup)

@dp.message_handler(content_types=["web_app_data"])
async def webData(message: types.Message):
    result = json.loads(message.web_app_data.data)
    await message.answer(f"–ò–º—è: {result['name']} \n–ê–¥—Ä–µ—Å: {result['adres']} \n–¢–µ–ª–µ—Ñ–æ–Ω: {result['phone']}")
    await bot.send_invoice(message.chat.id, "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "invoice", config.PAYMENT_TOKEN, "RUB", [types.LabeledPrice("–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", 100 * 100)])

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def success(message: types.Message):
    await message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ {message.successful_payment.order_info}")

executor.start_polling(dp)